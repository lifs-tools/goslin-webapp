# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: 'lifs/lifs-goslin-webapp'
      REGISTRY_NAME: 'docker.lifs-tools.org'
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: 'true'      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Set Git user
      run: |
        git config --global committer.email "noreply@github.com"
        git config --global committer.name "GitHub"
        git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global author.name "${GITHUB_ACTOR}"
    - name: Setup Maven settings.xml
      uses: whelk-io/maven-settings-xml-action@v14
      with:
        servers: '[{ "id": "lifstools-jfrog", "username": "${env.ARTIFACTORY_USERNAME_REF}", "password": "${env.ARTIFACTORY_TOKEN_REF}" }]'
    - name: Set Release version env variable
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV  
    - name: Build with Maven
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: ./mvnw -B package -Pdocker --file pom.xml
    - name: Login to LIFS Tools registry
      uses: docker/login-action@v1
      with:
        registry: docker.lifs-tools.org
        username: ${{ secrets.LIFS_TOOLS_DOCKER_REGISTRY_USER }}
        password: ${{ secrets.LIFS_TOOLS_DOCKER_REGISTRY_PW }}
    - name: Tag and Push docker image
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }} ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }} && \
        docker tag ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }} ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest && \
        docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }} && \
        docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest

